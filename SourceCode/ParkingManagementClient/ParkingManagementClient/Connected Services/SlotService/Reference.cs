//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkingManagementClient.SlotService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="bookingResult", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary2lab4")]
    [System.SerializableAttribute()]
    public partial class bookingResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Booking_IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Slot_IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Booking_Id {
            get {
                return this.Booking_IdField;
            }
            set {
                if ((this.Booking_IdField.Equals(value) != true)) {
                    this.Booking_IdField = value;
                    this.RaisePropertyChanged("Booking_Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Slot_Id {
            get {
                return this.Slot_IdField;
            }
            set {
                if ((this.Slot_IdField.Equals(value) != true)) {
                    this.Slot_IdField = value;
                    this.RaisePropertyChanged("Slot_Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="exitResult", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary2lab4")]
    [System.SerializableAttribute()]
    public partial class exitResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int paymentIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int paymentId {
            get {
                return this.paymentIdField;
            }
            set {
                if ((this.paymentIdField.Equals(value) != true)) {
                    this.paymentIdField = value;
                    this.RaisePropertyChanged("paymentId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Booking", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary2lab4")]
    [System.SerializableAttribute()]
    public partial class Booking : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArrivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BookingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SlotIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Arrival {
            get {
                return this.ArrivalField;
            }
            set {
                if ((this.ArrivalField.Equals(value) != true)) {
                    this.ArrivalField = value;
                    this.RaisePropertyChanged("Arrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookingId {
            get {
                return this.BookingIdField;
            }
            set {
                if ((this.BookingIdField.Equals(value) != true)) {
                    this.BookingIdField = value;
                    this.RaisePropertyChanged("BookingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Exit {
            get {
                return this.ExitField;
            }
            set {
                if ((this.ExitField.Equals(value) != true)) {
                    this.ExitField = value;
                    this.RaisePropertyChanged("Exit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SlotId {
            get {
                return this.SlotIdField;
            }
            set {
                if ((this.SlotIdField.Equals(value) != true)) {
                    this.SlotIdField = value;
                    this.RaisePropertyChanged("SlotId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Booking1", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary2lab4")]
    [System.SerializableAttribute()]
    public partial class Booking1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ArrivalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BookingIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlateNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SlotIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Arrival {
            get {
                return this.ArrivalField;
            }
            set {
                if ((this.ArrivalField.Equals(value) != true)) {
                    this.ArrivalField = value;
                    this.RaisePropertyChanged("Arrival");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BookingId {
            get {
                return this.BookingIdField;
            }
            set {
                if ((this.BookingIdField.Equals(value) != true)) {
                    this.BookingIdField = value;
                    this.RaisePropertyChanged("BookingId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Exit {
            get {
                return this.ExitField;
            }
            set {
                if ((this.ExitField.Equals(value) != true)) {
                    this.ExitField = value;
                    this.RaisePropertyChanged("Exit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlateNumber {
            get {
                return this.PlateNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlateNumberField, value) != true)) {
                    this.PlateNumberField = value;
                    this.RaisePropertyChanged("PlateNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SlotId {
            get {
                return this.SlotIdField;
            }
            set {
                if ((this.SlotIdField.Equals(value) != true)) {
                    this.SlotIdField = value;
                    this.RaisePropertyChanged("SlotId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SlotService.ISlotService")]
    public interface ISlotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/available_section", ReplyAction="http://tempuri.org/ISlotService/available_sectionResponse")]
        string[] available_section();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/available_section", ReplyAction="http://tempuri.org/ISlotService/available_sectionResponse")]
        System.Threading.Tasks.Task<string[]> available_sectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/available_floor", ReplyAction="http://tempuri.org/ISlotService/available_floorResponse")]
        int[] available_floor(string section);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/available_floor", ReplyAction="http://tempuri.org/ISlotService/available_floorResponse")]
        System.Threading.Tasks.Task<int[]> available_floorAsync(string section);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/available_type", ReplyAction="http://tempuri.org/ISlotService/available_typeResponse")]
        string[] available_type(string section, int floor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/available_type", ReplyAction="http://tempuri.org/ISlotService/available_typeResponse")]
        System.Threading.Tasks.Task<string[]> available_typeAsync(string section, int floor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/addSlots", ReplyAction="http://tempuri.org/ISlotService/addSlotsResponse")]
        int addSlots(string section, int floor, string type, int normalCharge, int overtimeCharge, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/addSlots", ReplyAction="http://tempuri.org/ISlotService/addSlotsResponse")]
        System.Threading.Tasks.Task<int> addSlotsAsync(string section, int floor, string type, int normalCharge, int overtimeCharge, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/removeSlots", ReplyAction="http://tempuri.org/ISlotService/removeSlotsResponse")]
        int removeSlots(string section, int floor, string type, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/removeSlots", ReplyAction="http://tempuri.org/ISlotService/removeSlotsResponse")]
        System.Threading.Tasks.Task<int> removeSlotsAsync(string section, int floor, string type, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/showAllSlots", ReplyAction="http://tempuri.org/ISlotService/showAllSlotsResponse")]
        int showAllSlots(string section, int floor, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/showAllSlots", ReplyAction="http://tempuri.org/ISlotService/showAllSlotsResponse")]
        System.Threading.Tasks.Task<int> showAllSlotsAsync(string section, int floor, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/bookSlot", ReplyAction="http://tempuri.org/ISlotService/bookSlotResponse")]
        ParkingManagementClient.SlotService.bookingResult bookSlot(string section, int floor, string type, int userid, string vehicleno, System.DateTime arrivaltime, System.DateTime exittime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/bookSlot", ReplyAction="http://tempuri.org/ISlotService/bookSlotResponse")]
        System.Threading.Tasks.Task<ParkingManagementClient.SlotService.bookingResult> bookSlotAsync(string section, int floor, string type, int userid, string vehicleno, System.DateTime arrivaltime, System.DateTime exittime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/cancelBooking", ReplyAction="http://tempuri.org/ISlotService/cancelBookingResponse")]
        int cancelBooking(int bookingId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/cancelBooking", ReplyAction="http://tempuri.org/ISlotService/cancelBookingResponse")]
        System.Threading.Tasks.Task<int> cancelBookingAsync(int bookingId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/exitVehicle", ReplyAction="http://tempuri.org/ISlotService/exitVehicleResponse")]
        ParkingManagementClient.SlotService.exitResult exitVehicle(int bookingId, System.DateTime exitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/exitVehicle", ReplyAction="http://tempuri.org/ISlotService/exitVehicleResponse")]
        System.Threading.Tasks.Task<ParkingManagementClient.SlotService.exitResult> exitVehicleAsync(int bookingId, System.DateTime exitTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/makePayment", ReplyAction="http://tempuri.org/ISlotService/makePaymentResponse")]
        int makePayment(int paymentId, string paymentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/makePayment", ReplyAction="http://tempuri.org/ISlotService/makePaymentResponse")]
        System.Threading.Tasks.Task<int> makePaymentAsync(int paymentId, string paymentType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/showBookings", ReplyAction="http://tempuri.org/ISlotService/showBookingsResponse")]
        ParkingManagementClient.SlotService.Booking[] showBookings(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/showBookings", ReplyAction="http://tempuri.org/ISlotService/showBookingsResponse")]
        System.Threading.Tasks.Task<ParkingManagementClient.SlotService.Booking[]> showBookingsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/showAllBookings", ReplyAction="http://tempuri.org/ISlotService/showAllBookingsResponse")]
        ParkingManagementClient.SlotService.Booking1[] showAllBookings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISlotService/showAllBookings", ReplyAction="http://tempuri.org/ISlotService/showAllBookingsResponse")]
        System.Threading.Tasks.Task<ParkingManagementClient.SlotService.Booking1[]> showAllBookingsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISlotServiceChannel : ParkingManagementClient.SlotService.ISlotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SlotServiceClient : System.ServiceModel.ClientBase<ParkingManagementClient.SlotService.ISlotService>, ParkingManagementClient.SlotService.ISlotService {
        
        public SlotServiceClient() {
        }
        
        public SlotServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SlotServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SlotServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SlotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] available_section() {
            return base.Channel.available_section();
        }
        
        public System.Threading.Tasks.Task<string[]> available_sectionAsync() {
            return base.Channel.available_sectionAsync();
        }
        
        public int[] available_floor(string section) {
            return base.Channel.available_floor(section);
        }
        
        public System.Threading.Tasks.Task<int[]> available_floorAsync(string section) {
            return base.Channel.available_floorAsync(section);
        }
        
        public string[] available_type(string section, int floor) {
            return base.Channel.available_type(section, floor);
        }
        
        public System.Threading.Tasks.Task<string[]> available_typeAsync(string section, int floor) {
            return base.Channel.available_typeAsync(section, floor);
        }
        
        public int addSlots(string section, int floor, string type, int normalCharge, int overtimeCharge, int amount) {
            return base.Channel.addSlots(section, floor, type, normalCharge, overtimeCharge, amount);
        }
        
        public System.Threading.Tasks.Task<int> addSlotsAsync(string section, int floor, string type, int normalCharge, int overtimeCharge, int amount) {
            return base.Channel.addSlotsAsync(section, floor, type, normalCharge, overtimeCharge, amount);
        }
        
        public int removeSlots(string section, int floor, string type, int amount) {
            return base.Channel.removeSlots(section, floor, type, amount);
        }
        
        public System.Threading.Tasks.Task<int> removeSlotsAsync(string section, int floor, string type, int amount) {
            return base.Channel.removeSlotsAsync(section, floor, type, amount);
        }
        
        public int showAllSlots(string section, int floor, string type) {
            return base.Channel.showAllSlots(section, floor, type);
        }
        
        public System.Threading.Tasks.Task<int> showAllSlotsAsync(string section, int floor, string type) {
            return base.Channel.showAllSlotsAsync(section, floor, type);
        }
        
        public ParkingManagementClient.SlotService.bookingResult bookSlot(string section, int floor, string type, int userid, string vehicleno, System.DateTime arrivaltime, System.DateTime exittime) {
            return base.Channel.bookSlot(section, floor, type, userid, vehicleno, arrivaltime, exittime);
        }
        
        public System.Threading.Tasks.Task<ParkingManagementClient.SlotService.bookingResult> bookSlotAsync(string section, int floor, string type, int userid, string vehicleno, System.DateTime arrivaltime, System.DateTime exittime) {
            return base.Channel.bookSlotAsync(section, floor, type, userid, vehicleno, arrivaltime, exittime);
        }
        
        public int cancelBooking(int bookingId, int userId) {
            return base.Channel.cancelBooking(bookingId, userId);
        }
        
        public System.Threading.Tasks.Task<int> cancelBookingAsync(int bookingId, int userId) {
            return base.Channel.cancelBookingAsync(bookingId, userId);
        }
        
        public ParkingManagementClient.SlotService.exitResult exitVehicle(int bookingId, System.DateTime exitTime) {
            return base.Channel.exitVehicle(bookingId, exitTime);
        }
        
        public System.Threading.Tasks.Task<ParkingManagementClient.SlotService.exitResult> exitVehicleAsync(int bookingId, System.DateTime exitTime) {
            return base.Channel.exitVehicleAsync(bookingId, exitTime);
        }
        
        public int makePayment(int paymentId, string paymentType) {
            return base.Channel.makePayment(paymentId, paymentType);
        }
        
        public System.Threading.Tasks.Task<int> makePaymentAsync(int paymentId, string paymentType) {
            return base.Channel.makePaymentAsync(paymentId, paymentType);
        }
        
        public ParkingManagementClient.SlotService.Booking[] showBookings(int userId) {
            return base.Channel.showBookings(userId);
        }
        
        public System.Threading.Tasks.Task<ParkingManagementClient.SlotService.Booking[]> showBookingsAsync(int userId) {
            return base.Channel.showBookingsAsync(userId);
        }
        
        public ParkingManagementClient.SlotService.Booking1[] showAllBookings() {
            return base.Channel.showAllBookings();
        }
        
        public System.Threading.Tasks.Task<ParkingManagementClient.SlotService.Booking1[]> showAllBookingsAsync() {
            return base.Channel.showAllBookingsAsync();
        }
    }
}
